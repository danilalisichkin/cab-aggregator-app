version: "3.7"

services:

  ride-database1:
    build:
      context: .
    container_name: cab-ride-database1
    image: mongo:7.0
    command: mongod --replSet rs0 --bind_ip_all
    ports:
      - "27017:27017"
    volumes:
      - ride-database1_data:/data/db

  ride-database2:
    build:
      context: .
    container_name: cab-ride-database2
    image: mongo:7.0
    command: mongod --replSet rs0 --bind_ip_all
    ports:
      - "27018:27017"
    volumes:
      - ride-database2_data:/data/db

  rating-database1:
    build:
      context: .
    container_name: cab-rating-database1
    image: mongo:7.0
    command: mongod --replSet rs1 --bind_ip_all --port 27017
    ports:
      - "27019:27017"
    volumes:
      - rating-database1_data:/data/db

  rating-database2:
    build:
      context: .
    container_name: cab-rating-database2
    image: mongo:7.0
    command: mongod --replSet rs1 --bind_ip_all --port 27017
    ports:
      - "27020:27017"
    volumes:
      - rating-database2_data:/data/db

  passenger-database:
    image: postgres:17
    container_name: cab-passenger-database
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_DB: passenger_database
    ports:
      - "5433:5432"
    volumes:
      - passenger-database_data:/var/lib/postgresql/data
    networks:
      - cab-aggregator-network

  eureka-server:
    build: eureka-server
    image: cab-eureka-server:1.0.0
    container_name: cab-eureka-server
    ports:
      - "8761:8761"
    networks:
      - cab-aggregator-network

  passenger-service:
    build: passenger-service
    image: cab-passenger-service:1.0.0
    container_name: cab-passenger-service
    environment:
      DB_USERNAME: postgres
      DB_PASSWORD: root
      DB_NAME: passenger_database
      DB_HOSTPORT: passenger-database:5432
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      SERVER_PORT: 8082
      LOGSTASH_HOSTPORT: logstash:5000
    ports:
      - "8082:8082"
    networks:
      - cab-aggregator-network
    depends_on:
      - passenger-database
      - eureka-server
      - kafka

  zookeeper:
    image: zookeeper:3.7.0
    container_name: cab-zookeeper
    ports:
      - "2181:2181"
    networks:
      - cab-aggregator-network

  kafka:
    image: obsidiandynamics/kafka
    container_name: cab-kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER_INTERNAL:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: DOCKER_INTERNAL://:29092,DOCKER_EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: DOCKER_INTERNAL://kafka:29092,DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - cab-aggregator-network
    depends_on:
      - zookeeper

  prometheus:
    image: prom/prometheus:v3.1.0
    container_name: cab-prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--web.enable-lifecycle"
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5
    networks:
      - cab-aggregator-network

  grafana:
    image: grafana/grafana:11.4.0
    container_name: cab-grafana
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: true
    healthcheck:
      test: curl --fail -s http://localhost:3000/api/health || exit 1
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5
    networks:
      - cab-aggregator-network

  elasticsearch:
    image: elasticsearch:7.14.2
    container_name: cab-elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      discovery.type: single-node
      ELASTIC_PASSWORD: elastic
    networks:
      - cab-aggregator-network

  logstash:
    image: logstash:7.14.2
    container_name: cab-logstash
    volumes:
      - ./monitoring/logstash/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - "5000:5000"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_USERNAME: elastic
      ELASTIC_PASSWORD: elastic
    depends_on:
      - elasticsearch
    networks:
      - cab-aggregator-network

  kibana:
    image: kibana:7.14.2
    container_name: cab-kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_USERNAME: elastic
      ELASTICSEARCH_PASSWORD: elastic
      XPACK_MONITORING_UI_CONTAINER_ELASTICSEARCH_ENABLED: "true"
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - cab-aggregator-network

volumes:
  passenger-database_data:
  ride-database1_data:
  ride-database2_data:
  rating-database1_data:
  rating-database2_data:

networks:
  cab-aggregator-network:
    driver: bridge
