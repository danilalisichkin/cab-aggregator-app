spring:
  application:
    name: ride-service
  messages:
    basename:
      encoding: "UTF-8"
      error-causes: "classpath:error_causes"
      validation-errors: "classpath:validation_errors"
      messages: "classpath:messages"
  data:
    mongodb:
      uri: mongodb://${DB_HOSTPORT:localhost:27018}/${DB_NAME:ride_database}
      username: ${DB_USERNAME:mongo}
      password: ${DB_PASSWORD:root}
      replica-set-name: ${DB_REPLICA_SET_NAME:rs0}
      database: ${DB_NAME:ride_database}
  kafka:
    consumer:
      key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
      group-id: payment-changing-group
      properties:
        spring.json:
          value.default.type: java.util.Map
          trusted.packages: '*'
          use.type.headers: false
        spring.deserializer:
          key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
          value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
management:
  endpoints:
    web:
      exposure:
        include: health,prometheus
  metrics:
    distribution:
      percentiles-histogram:
        "[http.server.requests]": true
  prometheus:
    metrics:
      export:
        enabled: true
logging:
  logstash:
    server: ${LOGSTASH_HOSTPORT:localhost:5000}
app:
  open-route:
    api-key: ${OPENROUTE_API_KEY}
  payout-policies:
    economy:
      percentage: 60
    comfort:
      percentage: 50
    business:
      percentage: 40
  kafka:
    topics:
      rate:
        name: rating.creation.v1
        partitions: 1
        replicas: 1
      payment:
        name: payment.creation.v1
        partitions: 1
        replicas: 1
      payout:
        name: payout.creation.v1
        partitions: 1
        replicas: 1
      payment-status:
        name: payment-status.changing.v1
mongock:
  migration-scan-package: com.cabaggregator.rideservice.migrations
  enabled: true
services:
  open-route:
    name: open-route-api
    path: https://api.openrouteservice.org/v2
  price:
    name: price-calculation-service
    path: api/v1/pricing
  promo-code:
    name: promo-code-service
    path: /api/v1/promo-codes
  promo-stat:
    name: promo-code-service
    path: /api/v1/promo-stats
eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:http://localhost:8761/eureka/}
server:
  port: ${SERVER_PORT:8084}
