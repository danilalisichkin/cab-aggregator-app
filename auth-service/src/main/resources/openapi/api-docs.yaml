openapi: 3.0.1
info:
  title: Auth Service API documentation
  description: "API responsible for interaction with users, their roles.Provides authentication,\
    \ authorization operations.Integrated with Keycloak server"
  contact:
    name: Danila Lisichkin
    email: lisichkindanila@gmail.com
  version: 1.0.0
servers:
- url: http://localhost:8083
  description: Generated server url
tags:
- name: User API Controller
  description: Provides operations with users and their roles
- name: Auth API Controller
  description: "Provides sign in, sign up, and refresh access token operations"
paths:
  /api/v1/users/{id}/role:
    post:
      tags:
      - User API Controller
      summary: Assign role
      description: Assigns a role to an existing user
      operationId: assignRole
      parameters:
      - name: id
        in: path
        description: ID of the user
        required: true
        schema:
          type: string
          format: uuid
        example: 123e4567-e89b-12d3-a456-426614174000
      - name: role
        in: query
        description: Role to assign
        required: true
        schema:
          type: string
          enum:
          - ADMIN
          - PASSENGER
          - DRIVER
        example: PASSENGER
      responses:
        "400":
          description: "Bad request: invalid parameters or missing required fields"
        "204":
          description: Role successfully assigned
        "401":
          description: "Unauthorized: missing or invalid access token"
        "403":
          description: "Forbidden: insufficient access rights"
        "404":
          description: "Not found: user with the given ID does not exist"
    delete:
      tags:
      - User API Controller
      summary: Unassign role
      description: Removes a role from an existing user
      operationId: unassignRole
      parameters:
      - name: id
        in: path
        description: ID of the user
        required: true
        schema:
          type: string
          format: uuid
        example: 123e4567-e89b-12d3-a456-426614174000
      - name: role
        in: query
        description: Role to unassign
        required: true
        schema:
          type: string
          enum:
          - ADMIN
          - PASSENGER
          - DRIVER
        example: DRIVER
      responses:
        "400":
          description: "Bad request: invalid parameters or missing required fields"
        "204":
          description: Role successfully removed
        "401":
          description: "Unauthorized: missing or invalid access token"
        "403":
          description: "Forbidden: insufficient access rights"
        "404":
          description: "Not found: user with the given ID does not exist"
  /api/v1/auth/sign-up:
    post:
      tags:
      - Auth API Controller
      summary: Sign up
      description: Allows a new user to sign up in the application
      operationId: signUp
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegisterDto"
        required: true
      responses:
        "400":
          description: "Bad request: invalid parameters or missing required fields"
        "409":
          description: "Conflict: phone number or email is already used"
        "200":
          description: Successful response
  /api/v1/auth/sign-in:
    post:
      tags:
      - Auth API Controller
      summary: Sign in
      description: Allows the user to sign in to the application
      operationId: signIn
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLoginDto"
        required: true
      responses:
        "400":
          description: "Bad request: invalid parameters or missing required fields"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/KeycloakAccessTokenDto"
        "401":
          description: "Unauthorized: invalid login identifier or password"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/KeycloakAccessTokenDto"
        "200":
          description: Successful response
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/KeycloakAccessTokenDto"
  /api/v1/auth/refresh-token:
    post:
      tags:
      - Auth API Controller
      summary: Refresh token
      description: Allows the user to refresh their access token using a refresh token
      operationId: refreshToken
      requestBody:
        content:
          application/json:
            schema:
              type: string
              description: Refresh token used to obtain a new access token
        required: true
      responses:
        "400":
          description: "Bad request: invalid parameters or refresh token expired"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/KeycloakAccessTokenDto"
        "200":
          description: Successful response
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/KeycloakAccessTokenDto"
  /api/v1/users/{id}:
    get:
      tags:
      - User API Controller
      summary: Get user
      description: Allows retrieval of a user by ID
      operationId: getUser
      parameters:
      - name: id
        in: path
        description: ID of the user
        required: true
        schema:
          type: string
          format: uuid
        example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        "400":
          description: "Bad request: invalid parameters or missing required fields"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserRepresentation"
        "200":
          description: Successful response
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserRepresentation"
        "401":
          description: "Unauthorized: missing or invalid access token"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserRepresentation"
        "403":
          description: "Forbidden: insufficient access rights"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserRepresentation"
        "404":
          description: "Not found: user with the given ID does not exist"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserRepresentation"
    delete:
      tags:
      - User API Controller
      summary: Delete user
      description: Allows deletion of a user by ID
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        description: ID of the user
        required: true
        schema:
          type: string
          format: uuid
        example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        "204":
          description: User successfully deleted
        "400":
          description: "Bad request: invalid parameters or missing required fields"
        "401":
          description: "Unauthorized: missing or invalid access token"
        "403":
          description: "Forbidden: insufficient access rights"
        "404":
          description: "Not found: user with the given ID does not exist"
  /api/v1/users/{id}/roles:
    get:
      tags:
      - User API Controller
      summary: Get user roles
      description: Allows retrieval of roles assigned to a user
      operationId: getUserRoles
      parameters:
      - name: id
        in: path
        description: ID of the user
        required: true
        schema:
          type: string
          format: uuid
        example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        "400":
          description: "Bad request: invalid parameters or missing required fields"
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RoleRepresentation"
        "200":
          description: Successful response
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RoleRepresentation"
        "401":
          description: "Unauthorized: missing or invalid access token"
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RoleRepresentation"
        "403":
          description: "Forbidden: insufficient access rights"
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RoleRepresentation"
        "404":
          description: "Not found: user with the given ID does not exist"
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RoleRepresentation"
components:
  schemas:
    UserRegisterDto:
      required:
      - email
      - firstName
      - lastName
      - password
      - phoneNumber
      - role
      type: object
      properties:
        phoneNumber:
          pattern: "^375(15|29|33|44)\\d{7}$"
          type: string
        email:
          maxLength: 50
          minLength: 0
          type: string
        password:
          maxLength: 40
          minLength: 4
          type: string
        firstName:
          maxLength: 50
          minLength: 0
          type: string
        lastName:
          maxLength: 50
          minLength: 0
          type: string
        role:
          type: string
          enum:
          - PASSENGER
          - DRIVER
      description: Details required for user registration
    UserLoginDto:
      required:
      - identifier
      - password
      type: object
      properties:
        identifier:
          maxLength: 50
          minLength: 0
          type: string
        password:
          maxLength: 40
          minLength: 4
          type: string
      description: Credentials required for signing in
    KeycloakAccessTokenDto:
      type: object
      properties:
        accessToken:
          type: string
        expiresIn:
          type: integer
          format: int64
        refreshExpiresIn:
          type: integer
          format: int64
        refreshToken:
          type: string
        tokenType:
          type: string
      description: Server response with user's access token
    CredentialRepresentation:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        userLabel:
          type: string
        createdDate:
          type: integer
          format: int64
        secretData:
          type: string
        credentialData:
          type: string
        priority:
          type: integer
          format: int32
        value:
          type: string
        temporary:
          type: boolean
        device:
          type: string
          deprecated: true
        hashedSaltedValue:
          type: string
          deprecated: true
        salt:
          type: string
          deprecated: true
        hashIterations:
          type: integer
          format: int32
          deprecated: true
        counter:
          type: integer
          format: int32
          deprecated: true
        algorithm:
          type: string
          deprecated: true
        digits:
          type: integer
          format: int32
          deprecated: true
        period:
          type: integer
          format: int32
          deprecated: true
        config:
          type: object
          properties:
            empty:
              type: boolean
          additionalProperties:
            type: array
            deprecated: true
            items:
              type: string
              deprecated: true
          deprecated: true
    FederatedIdentityRepresentation:
      type: object
      properties:
        identityProvider:
          type: string
        userId:
          type: string
        userName:
          type: string
    SocialLinkRepresentation:
      type: object
      properties:
        socialProvider:
          type: string
        socialUserId:
          type: string
        socialUsername:
          type: string
    UserConsentRepresentation:
      type: object
      properties:
        clientId:
          type: string
        grantedClientScopes:
          type: array
          items:
            type: string
        createdDate:
          type: integer
          format: int64
        lastUpdatedDate:
          type: integer
          format: int64
        grantedRealmRoles:
          type: array
          deprecated: true
          items:
            type: string
            deprecated: true
    UserProfileAttributeGroupMetadata:
      type: object
      properties:
        name:
          type: string
        displayHeader:
          type: string
        displayDescription:
          type: string
        annotations:
          type: object
          additionalProperties:
            type: object
    UserProfileAttributeMetadata:
      type: object
      properties:
        name:
          type: string
        displayName:
          type: string
        required:
          type: boolean
        readOnly:
          type: boolean
        annotations:
          type: object
          additionalProperties:
            type: object
        validators:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: object
        group:
          type: string
        multivalued:
          type: boolean
    UserProfileMetadata:
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: "#/components/schemas/UserProfileAttributeMetadata"
        groups:
          type: array
          items:
            $ref: "#/components/schemas/UserProfileAttributeGroupMetadata"
    UserRepresentation:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        emailVerified:
          type: boolean
        attributes:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        userProfileMetadata:
          $ref: "#/components/schemas/UserProfileMetadata"
        self:
          type: string
        origin:
          type: string
          deprecated: true
        createdTimestamp:
          type: integer
          format: int64
        enabled:
          type: boolean
        totp:
          type: boolean
          deprecated: true
        federationLink:
          type: string
        serviceAccountClientId:
          type: string
        credentials:
          type: array
          items:
            $ref: "#/components/schemas/CredentialRepresentation"
        disableableCredentialTypes:
          uniqueItems: true
          type: array
          items:
            type: string
        requiredActions:
          type: array
          items:
            type: string
        federatedIdentities:
          type: array
          items:
            $ref: "#/components/schemas/FederatedIdentityRepresentation"
        realmRoles:
          type: array
          items:
            type: string
        clientRoles:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        clientConsents:
          type: array
          items:
            $ref: "#/components/schemas/UserConsentRepresentation"
        notBefore:
          type: integer
          format: int32
        applicationRoles:
          type: object
          additionalProperties:
            type: array
            deprecated: true
            items:
              type: string
              deprecated: true
          deprecated: true
        socialLinks:
          type: array
          deprecated: true
          items:
            $ref: "#/components/schemas/SocialLinkRepresentation"
        groups:
          type: array
          items:
            type: string
        access:
          type: object
          additionalProperties:
            type: boolean
    Composites:
      type: object
      properties:
        realm:
          uniqueItems: true
          type: array
          items:
            type: string
        client:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        application:
          type: object
          additionalProperties:
            type: array
            deprecated: true
            items:
              type: string
              deprecated: true
          deprecated: true
    RoleRepresentation:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        scopeParamRequired:
          type: boolean
          deprecated: true
        composite:
          type: boolean
        composites:
          $ref: "#/components/schemas/Composites"
        clientRole:
          type: boolean
        containerId:
          type: string
        attributes:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
  securitySchemes:
    token:
      type: http
      scheme: bearer
